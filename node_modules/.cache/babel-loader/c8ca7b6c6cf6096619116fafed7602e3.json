{"ast":null,"code":"export default function MakeScramble() {\n  var options = [\"F\", \"F2\", \"F'\", \"R\", \"R2\", \"R'\", \"U\", \"U2\", \"U'\", \"B\", \"B2\", \"B'\", \"L\", \"L2\", \"L'\", \"D\", \"D2\", \"D'\"];\n  var numOptions = [0, 1, 2, 3, 4, 5];\n  var scramble = [];\n  var scrambleMoves = [];\n  var bad = true;\n\n  while (bad) {\n    scramble = [];\n\n    for (var i = 0; i < 20; i++) {\n      scramble.push(numOptions[getRandomInt(6)]);\n    }\n\n    for (var i = 0; i < 20 - 1; i++) {\n      if (scramble[i] == scramble[i + 1]) {\n        bad = true;\n        break;\n      } else {\n        bad = false;\n      }\n    }\n  }\n\n  var move;\n\n  for (var i = 0; i < 20; i++) {\n    switch (scramble[i]) {\n      case 0:\n        move = options[getRandomInt(3)]; // 0,1,2\n\n        scrambleMoves.push(move);\n        break;\n\n      case 1:\n        move = options[getRandomIntBetween(3, 6)]; // 3,4,5\n\n        scrambleMoves.push(move);\n        break;\n\n      case 2:\n        move = options[getRandomIntBetween(6, 9)]; // 6,7,8\n\n        scrambleMoves.push(move);\n        break;\n\n      case 3:\n        move = options[getRandomIntBetween(9, 12)]; // 9,10,11\n\n        scrambleMoves.push(move);\n        break;\n\n      case 4:\n        move = options[getRandomIntBetween(12, 15)]; // 12,13,14\n\n        scrambleMoves.push(move);\n        break;\n\n      case 5:\n        move = options[getRandomIntBetween(15, 18)]; // 15,16,17\n\n        scrambleMoves.push(move);\n        break;\n    }\n  }\n\n  return scrambleMoves;\n}\n_c = MakeScramble;\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max)); // returns up to max - 1\n}\n\nfunction getRandomIntBetween(min, max) {\n  // return a number from min to max - 1. Ex. 3, 9 returns 3 - 8\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"MakeScramble\");","map":{"version":3,"sources":["/Users/dipenkhatri/Desktop/cuboholic/src/components/scramble/scramble.js"],"names":["MakeScramble","options","numOptions","scramble","scrambleMoves","bad","i","push","getRandomInt","move","getRandomIntBetween","max","Math","floor","random","min"],"mappings":"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","sourcesContent":["export default function MakeScramble() {\n    var options = [\"F\", \"F2\", \"F'\", \"R\", \"R2\", \"R'\", \"U\", \"U2\", \"U'\", \"B\", \"B2\", \"B'\", \"L\", \"L2\", \"L'\", \"D\", \"D2\", \"D'\"]\n    var numOptions = [0, 1, 2, 3, 4, 5] \n    var scramble = []\n    var scrambleMoves = []\n    var bad = true\n\n    while (bad) {\n        scramble = []\n        for (var i = 0; i < 20; i++) {\n            scramble.push(numOptions[getRandomInt(6)])\n        }\n        for (var i = 0; i < 20 - 1; i++) {\n            if (scramble[i] == scramble[i + 1]) {\n                bad = true\n                break\n            } else {\n                bad = false\n            }\n        }\n    }\n    var move;\n    for (var i = 0; i < 20; i++) {\n        switch (scramble[i]) {\n            case 0:\n                move = options[getRandomInt(3)] // 0,1,2\n                scrambleMoves.push(move)\n                break\n            case 1:\n                move = options[getRandomIntBetween(3, 6)] // 3,4,5\n                scrambleMoves.push(move)\n                break\n            case 2:\n                move = options[getRandomIntBetween(6, 9)] // 6,7,8\n                scrambleMoves.push(move)\n                break\n            case 3:\n                move = options[getRandomIntBetween(9, 12)] // 9,10,11\n                scrambleMoves.push(move)\n                break\n            case 4:\n                move = options[getRandomIntBetween(12, 15)] // 12,13,14\n                scrambleMoves.push(move)\n                break\n            case 5:\n                move = options[getRandomIntBetween(15, 18)] // 15,16,17\n                scrambleMoves.push(move)\n                break\n        }\n    }\n    return (\n        scrambleMoves\n    )\n\n}\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max)) // returns up to max - 1\n}\nfunction getRandomIntBetween(min, max) { // return a number from min to max - 1. Ex. 3, 9 returns 3 - 8\n    return Math.floor(Math.random() * (max - min) + min)\n}"]},"metadata":{},"sourceType":"module"}